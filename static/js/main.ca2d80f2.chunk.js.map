{"version":3,"sources":["components/Header.js","components/Item.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Item","state","checked","todo","this","props","setState","onCheckChange","onItemRemove","className","htmlFor","task","style","textDecoration","type","name","id","onChange","handleCheck","onClick","Component","Main","saveInLocalStorage","item","localStorage","setItem","JSON","stringify","getFromLocalStorage","tasks","parse","getItem","taskList","opa","handleChange","bind","handleSubmit","clearCompleted","key","value","e","preventDefault","push","element","indexOf","newTaskList","filter","filterNoCompleted","onSubmit","maxLength","required","placeholder","target","map","i","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca2d80f2.chunk.js","sourcesContent":["function Header() {\n  return (\n    <header>\n      <h1>Todo List</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react'\n\nexport default class Item extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  componentDidMount() {\n    const { todo } = this.props;\n    this.setState({\n      checked: todo.checked,\n    });\n  }\n\n  handleCheck(todo, onCheckChange) {\n    const { checked } = this.state;\n    this.setState({\n      checked: !checked,\n    })\n    onCheckChange(todo, checked);\n  }\n\n  render() {\n    const { todo, onCheckChange, onItemRemove } = this.props;\n    const { checked } = this.state;\n\n    return (\n      <li>\n        <span className=\"todo-content\">\n          <label htmlFor={ todo.task } style={{ textDecoration: checked ? 'line-through' : 'none' }}>\n            <input\n              type=\"checkbox\"\n              name={ todo.task }\n              id={ todo.task }\n              className=\"input-todo\"\n              checked={ checked }\n              onChange={ () => this.handleCheck(todo, onCheckChange) }\n            />\n            {todo.task}\n          </label>\n        </span>\n\n        <span>\n          <button\n            className=\"remove-btn\"\n            onClick={ () => onItemRemove(todo) }\n            type=\"button\"\n          >\n            X\n          </button>\n        </span>\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Item from './Item';\n\nexport default class Main extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      task: '',\n      taskList: [],\n      opa: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onCheckChange = this.onCheckChange.bind(this);\n    this.onItemRemove = this.onItemRemove.bind(this);\n    this.clearCompleted = this.clearCompleted.bind(this);\n  }\n\n  componentDidMount() {\n    this.getFromLocalStorage()\n  }\n\n  handleChange(key, value) {\n    this.setState({\n      [key]: value,\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { task, taskList } = this.state;\n    taskList.push({\n      task,\n      checked: false,\n    });\n    this.setState({\n      task: '',\n      taskList,\n    });\n    this.saveInLocalStorage(taskList);\n  }\n\n  onCheckChange(element, checked) {\n    const { taskList } = this.state;\n    const task = taskList.indexOf(element);\n    taskList[task].checked = !checked;\n    this.setState({\n      taskList,\n    })\n    this.saveInLocalStorage(taskList);\n  }\n\n  onItemRemove(element) {\n    const { taskList } = this.state;\n    const newTaskList = taskList.filter((task) => task !== element);\n    this.setState({\n      taskList: newTaskList,\n    })\n    this.saveInLocalStorage(newTaskList);\n  }\n\n  clearCompleted() {\n    const { taskList } = this.state;\n    const filterNoCompleted = taskList.filter((task) => task.checked === false);\n    this.setState({\n      taskList: filterNoCompleted,\n    });\n    this.saveInLocalStorage(filterNoCompleted);\n  }\n\n  saveInLocalStorage = (item) => {\n    localStorage.setItem('tasks', JSON.stringify(item));\n  }\n\n  getFromLocalStorage = () => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    this.setState({\n      taskList: tasks ? tasks : [],\n    });\n  }\n\n  render() {\n    const { task, taskList } = this.state;\n\n    return (\n      <main>\n        <form onSubmit={ (e) => this.handleSubmit(e) } className=\"input-container\">\n          <input\n            type=\"text\"\n            name=\"input-task\"\n            id=\"input-task\"\n            maxLength=\"35\"\n            required\n            placeholder=\"tarefa\"\n            value={ task }\n            onChange={ ({target}) => this.handleChange('task', target.value) }\n          />\n          <button className=\"buttons\" id=\"button-add\" type=\"submit\">\n            +\n          </button>\n        </form>\n\n        <div className=\"list-container\">\n          <ul>\n            {taskList.map((todo, i) => (\n              <Item\n                key={ todo.task }\n                todo={ todo }\n                onCheckChange={ this.onCheckChange }\n                onItemRemove={ this.onItemRemove }\n              />\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"info-tasks-container\">\n          <p>\n            {taskList.filter((task) => task.checked).length} de \n            {' '}\n            {taskList.length} concluídos\n          </p>\n        </div>\n\n        <div className=\"buttons-container\">\n          <button className=\"buttons\" onClick={ this.clearCompleted } type=\"button\">\n            Remover concluídos\n          </button>\n          <button\n            className=\"buttons\"\n            onClick={ () => {\n              this.setState({ taskList: [] })\n              this.saveInLocalStorage([]);\n            } }\n          >\n            Limpar lista\n          </button>\n        </div>\n      </main>\n    )\n  }\n}\n","import './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}